<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>trickster</title>
	<subtitle>dev log</subtitle>
	<link href="https://trickster.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://trickster.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-06-23T10:45:55+09:00</updated>
	<id>https://trickster.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>cgroupsv2 on Linux</title>
		<published>2022-06-23T10:45:55+09:00</published>
		<updated>2022-06-23T10:45:55+09:00</updated>
		<link href="https://trickster.github.io/posts/cgroupsv2/" type="text/html"/>
		<id>https://trickster.github.io/posts/cgroupsv2/</id>
		<content type="html">&lt;h2 id=&quot;check-the-kernel-params&quot;&gt;Check the kernel params&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;default&#x2F;grub
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; GRUB_CMDLINE_LINUX=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;.... systemd_unified_cgroup_heirarchy=1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can change the above with&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; grubby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --update-kernel&lt;&#x2F;span&gt;&lt;span&gt;=ALL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --args&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;systemd.unified_cgroup_hierarchy=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;one-last-check&quot;&gt;One last check&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;grep -c&lt;&#x2F;span&gt;&lt;span&gt; cgroup &#x2F;proc&#x2F;mounts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Count cgroup mounts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the above shows a value &amp;gt; 1, then you need to reboot&lt;&#x2F;p&gt;
&lt;h2 id=&quot;filesystem&quot;&gt;Filesystem&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;On boot v2 heirarchy is at &lt;code&gt;&#x2F;sys&#x2F;fs&#x2F;cgroup&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[root ~&lt;&#x2F;span&gt;&lt;span&gt;]$ ls &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cgroup.controllers&lt;&#x2F;span&gt;&lt;span&gt;      cpuset.cpus.effective  io.pressure                    sys-kernel-config.mount
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cgroup.max.depth&lt;&#x2F;span&gt;&lt;span&gt;        cpuset.mems.effective  io.prio.class                  sys-kernel-debug.mount
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cgroup.max.descendants&lt;&#x2F;span&gt;&lt;span&gt;  cpu.stat               io.stat                        sys-kernel-tracing.mount
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cgroup.procs&lt;&#x2F;span&gt;&lt;span&gt;            dev-hugepages.mount    memory.numa_stat               system.slice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cgroup.stat&lt;&#x2F;span&gt;&lt;span&gt;             dev-mqueue.mount       memory.pressure                user.slice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cgroup.subtree_control&lt;&#x2F;span&gt;&lt;span&gt;  init.scope             memory.stat
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cgroup.threads&lt;&#x2F;span&gt;&lt;span&gt;          io.cost.model          misc.capacity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cpu.pressure&lt;&#x2F;span&gt;&lt;span&gt;            io.cost.qos            sys-fs-fuse-connections.mount
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;cgroups&quot;&gt;Cgroups&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Mechanism for heirarchically grouping processes&lt;&#x2F;li&gt;
&lt;li&gt;set of controllers (kernel components) that manage, control and monitor processes in cgroups&lt;&#x2F;li&gt;
&lt;li&gt;interface via psuedo filesystem&lt;&#x2F;li&gt;
&lt;li&gt;manipulated manually via shell commands, programs, systemd, docker etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;uses&quot;&gt;Uses&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;limit %CPU, memory, set priorities for resource allocation and monitoring&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-are-cgroups&quot;&gt;What are cgroups&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;group of processes that are bound together for resource management (one kind of namespaces in linux kernel)&lt;&#x2F;li&gt;
&lt;li&gt;arranged in heirarchy&lt;&#x2F;li&gt;
&lt;li&gt;can have zero or more child cgroups&lt;&#x2F;li&gt;
&lt;li&gt;inherit control settings from parent&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fs-interface&quot;&gt;FS interface&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;rmdir&lt;&#x2F;code&gt; will automatically populate&#x2F;delete the directories&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pid-controller-example&quot;&gt;PID controller example&lt;&#x2F;h2&gt;
&lt;p&gt;List of processes running in &lt;code&gt;mygrp&lt;&#x2F;code&gt; cgroup&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pwd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;&#x2F;sys&#x2F;fs&#x2F;cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir mygrp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd mygrp&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat cgroup.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cgroup.controllers&lt;&#x2F;span&gt;&lt;span&gt;      cgroup.max.depth        cgroup.max.descendants  cgroup.procs            cgroup.stat             cgroup.subtree_control  cgroup.threads
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat cgroup.subtree_control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt; pids
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; mygrp&#x2F;cgroup.procs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# This shell is in that cgroup
&lt;&#x2F;span&gt;&lt;span&gt;$ cat &#x2F;proc&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;0::&#x2F;mygrp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat mygrp&#x2F;cgroup.procs  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#check cgroup membership for this process
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;8068
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;8099
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# cat has 8068 pid, because this process is starting from this shell and this shell pid is in mygrp cgroup
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat mygrp&#x2F;pids.current
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat mygrp&#x2F;pids.max
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;max
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo 5 &amp;gt; mygrp&#x2F;pids.max
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; for j in $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span&gt; 1 5); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt; 60 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt; 8108
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[2]&lt;&#x2F;span&gt;&lt;span&gt; 8109
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[3]&lt;&#x2F;span&gt;&lt;span&gt; 8110
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[4]&lt;&#x2F;span&gt;&lt;span&gt; 8111
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat pids.current
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat pids.current
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt;   Done                    sleep 60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[2]&lt;&#x2F;span&gt;&lt;span&gt;   Done                    sleep 60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[3]-&lt;&#x2F;span&gt;&lt;span&gt;  Done                    sleep 60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[4]+&lt;&#x2F;span&gt;&lt;span&gt;  Done                    sleep 60
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; for j in $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span&gt; 1 5); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt; 60 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt; 8158
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[2]&lt;&#x2F;span&gt;&lt;span&gt; 8159
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[3]&lt;&#x2F;span&gt;&lt;span&gt; 8160
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[4]&lt;&#x2F;span&gt;&lt;span&gt; 8161
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bash:&lt;&#x2F;span&gt;&lt;span&gt; fork: retry: Resource temporarily unavailable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;^Cbash:&lt;&#x2F;span&gt;&lt;span&gt; fork: Interrupted system call
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;8068
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Cleaning up resources
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rmdir mygrp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rmdir:&lt;&#x2F;span&gt;&lt;span&gt; failed to remove &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;mygrp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: Device or resource busy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# put the current shell in the root cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cgroup.procs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rmdir mygrp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list-of-controllers-available&quot;&gt;List of controllers available&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;cpu
&lt;ul&gt;
&lt;li&gt;bandwidth strictly limits cpu&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;cpuset
&lt;ul&gt;
&lt;li&gt;control CPU and memory affinity
&lt;ul&gt;
&lt;li&gt;pin cgroup to one cpu&#x2F;subset of cpus or memory nodes&lt;&#x2F;li&gt;
&lt;li&gt;dynamically manage placement of app components&lt;&#x2F;li&gt;
&lt;li&gt;advanced usage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;memory
&lt;ul&gt;
&lt;li&gt;soft limits &amp;amp; hard limits&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;io
&lt;ul&gt;
&lt;li&gt;same as cpu&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;devices
&lt;ul&gt;
&lt;li&gt;important for containers&lt;&#x2F;li&gt;
&lt;li&gt;limit devices&lt;&#x2F;li&gt;
&lt;li&gt;example: inside container, disallow access to devices other than &#x2F;dev&#x2F;null&#x2F;zero&#x2F;full&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;control is done by attaching ebpf program to cgroup&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;pids
&lt;ul&gt;
&lt;li&gt;limit number of pids&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;freezer
&lt;ul&gt;
&lt;li&gt;freeze and thaw group of processes&lt;&#x2F;li&gt;
&lt;li&gt;used for container migration, checkpoint&#x2F;restore&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;perf-event
&lt;ul&gt;
&lt;li&gt;cgroup perf monitoring&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;rdma
&lt;ul&gt;
&lt;li&gt;control rdma resources&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;hugetlb
&lt;ul&gt;
&lt;li&gt;limit usage of huge pages per cgroup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;enable-disable-cgroup-controllers&quot;&gt;Enable&#x2F;disable cgroup controllers&lt;&#x2F;h3&gt;
&lt;p&gt;cgroup.controllers (available) &amp;amp; cgroup.subtree_control (enabled). Some implicit controllers are always available, like freezer, perf_event&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat cgroup.controllers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cpuset&lt;&#x2F;span&gt;&lt;span&gt; cpu io memory hugetlb pids misc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat cgroup.subtree_control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt; pids
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;mygrp&#x2F;pids.current
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;mygrp&#x2F;pids.current
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Read Linux programming interface book&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;cpu-example&quot;&gt;CPU example&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir grp1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls grp1&#x2F;cpu.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;grp1&#x2F;cpu.pressure&lt;&#x2F;span&gt;&lt;span&gt;  grp1&#x2F;cpu.stat
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# some cpu controls are enabled in grp1 because root cgroup has no such enabled
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;+pids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; cgroup.subtree_control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;+cpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; cgroup.subtree_control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat cgroup.subtree_control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt; memory pids
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls grp1&#x2F;cpu.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;grp1&#x2F;cpu.idle&lt;&#x2F;span&gt;&lt;span&gt;  grp1&#x2F;cpu.max.burst  grp1&#x2F;cpu.stat    grp1&#x2F;cpu.weight.nice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;grp1&#x2F;cpu.max&lt;&#x2F;span&gt;&lt;span&gt;   grp1&#x2F;cpu.pressure   grp1&#x2F;cpu.weight
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# now I got those controls in grp1 level
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls grp1&#x2F;cpu.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;grp1&#x2F;cpu.pressure&lt;&#x2F;span&gt;&lt;span&gt;  grp1&#x2F;cpu.stat
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;+cpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; cgroup.subtree_control
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls grp1&#x2F;cpu.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;grp1&#x2F;cpu.idle&lt;&#x2F;span&gt;&lt;span&gt;  grp1&#x2F;cpu.max.burst  grp1&#x2F;cpu.stat    grp1&#x2F;cpu.weight.nice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;grp1&#x2F;cpu.max&lt;&#x2F;span&gt;&lt;span&gt;   grp1&#x2F;cpu.pressure   grp1&#x2F;cpu.weight
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;20000 100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; grp1&#x2F;cpu.max
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$cat&lt;&#x2F;span&gt;&lt;span&gt; grp1&#x2F;cpu.max
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;20000&lt;&#x2F;span&gt;&lt;span&gt; 100000
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo 23148 &amp;gt; grp1&#x2F;cgroup.procs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;CPU dropped in usage (20% as per fraction)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[23148]  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; = 99.57; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;totCPU&lt;&#x2F;span&gt;&lt;span&gt; = 77.000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[23148]  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; = 99.59; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;totCPU&lt;&#x2F;span&gt;&lt;span&gt; = 78.000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[23148]  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; = 27.48; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;totCPU&lt;&#x2F;span&gt;&lt;span&gt; = 79.000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[23148]  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; = 20.00; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;totCPU&lt;&#x2F;span&gt;&lt;span&gt; = 80.000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[23148]  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; = 20.00; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;totCPU&lt;&#x2F;span&gt;&lt;span&gt; = 81.000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[23148]  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; = 20.00; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;totCPU&lt;&#x2F;span&gt;&lt;span&gt; = 82.000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;grp1&lt;&#x2F;code&gt; controls that are enabled are &lt;code&gt;root&#x2F;cgroup.subtree_control&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[root@siva-fedbox&lt;&#x2F;span&gt;&lt;span&gt; cgroup] cat grp1&#x2F;cgroup.controllers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt; memory pids
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[root@siva-fedbox&lt;&#x2F;span&gt;&lt;span&gt; cgroup] cat cgroup.subtree_control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt; memory pids
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;advanced-usage&quot;&gt;advanced usage&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;instead each cgroup there is &lt;code&gt;cgroup.events&lt;&#x2F;code&gt; containing k-v pairs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat grp1&#x2F;cgroup.events
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;populated&lt;&#x2F;span&gt;&lt;span&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 1 == subheirarchy contains live processes, 0 == no processes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;frozen&lt;&#x2F;span&gt;&lt;span&gt; 0 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;can monitor cgroup.events file, to get notification of changes of keys&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;inotify - generate IN_MODIFY&lt;&#x2F;li&gt;
&lt;li&gt;open fd, and monitor using select, epoll, poll&lt;&#x2F;li&gt;
&lt;li&gt;after notification, parse cgroup.events to find populated key&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;one process can monitor mutiple cgroup.events file (not possible in cgroupv1)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir newcgrp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sleep 10000 &amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt; 23614
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo 23614 &amp;gt;&amp;gt; newcgrp&#x2F;cgroup.procs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Result
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; while inotifywait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -q -e&lt;&#x2F;span&gt;&lt;span&gt; modify newcgrp&#x2F;cgroup.events ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; populated newcgrp&#x2F;cgroup.events ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;newcgrp&#x2F;cgroup.events&lt;&#x2F;span&gt;&lt;span&gt; MODIFY
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;populated&lt;&#x2F;span&gt;&lt;span&gt; 1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# atleast one process
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -9&lt;&#x2F;span&gt;&lt;span&gt; 23614
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;newcgrp&#x2F;cgroup.events&lt;&#x2F;span&gt;&lt;span&gt; MODIFY
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;populated&lt;&#x2F;span&gt;&lt;span&gt; 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ownership&quot;&gt;Ownership&lt;&#x2F;h2&gt;
&lt;p&gt;More &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;conf&#x2F;ndctechtown2021&#x2F;cgroups-v2-part-2-diving-deeper-NDC-TechTown-2021-Kerrisk.pdf&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;delegater - priveleged user who owns parent cgroup&lt;&#x2F;li&gt;
&lt;li&gt;delegatee - less privileged user who is assigned management of a subhierarchy under parent cgroup&lt;&#x2F;li&gt;
&lt;li&gt;delegater grants delegatee write access to certain files&lt;&#x2F;li&gt;
&lt;li&gt;change ownership of dir what will be root of delegated subtree
&lt;ul&gt;
&lt;li&gt;cgroups.proc&lt;&#x2F;li&gt;
&lt;li&gt;cgroup.subtree_control&lt;&#x2F;li&gt;
&lt;li&gt;any other filename listed in &#x2F;sys&#x2F;kernel&#x2F;cgroup&#x2F;delegate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;creating-a-container&quot;&gt;Creating a container&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a cgroup using &lt;code&gt;mkdir&lt;&#x2F;code&gt; or &lt;code&gt;sudo cgcreate -g cpu,cpuset,memory,io,pids:siva&lt;&#x2F;code&gt;, this creates all resources (everything is unified). Set whatever limits you want using &lt;code&gt;cgset&lt;&#x2F;code&gt; or following the kernel &lt;a href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;html&#x2F;latest&#x2F;admin-guide&#x2F;cgroup-v2.html&quot;&gt;doc&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;facebookmicrosites.github.io&#x2F;cgroup2&#x2F;docs&#x2F;memory-controller.html&quot;&gt;this&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Once cgroup is created, you can use &lt;code&gt;unshare&lt;&#x2F;code&gt; to create namespaces&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cgexec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cpu,memory::&#x2F;siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    unshare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -fmuipn --mount-proc &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    chroot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;PWD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;        &#x2F;bin&#x2F;mount -t proc proc &#x2F;proc &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;        hostname mycontainer &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;        &#x2F;usr&#x2F;bin&#x2F;fish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Delete cgroups using &lt;code&gt;sudo cgdelete -g cpu:&#x2F;siva&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;crashing-the-container&quot;&gt;Crashing the container&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cgset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; memory.max=300000000 siva &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Set the maximum memory limit for cgroup siva
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; bit.ly&#x2F;fish-container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -O&lt;&#x2F;span&gt;&lt;span&gt; fish.tar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# download fish image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; myroot; cd myroot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tar -xf&lt;&#x2F;span&gt;&lt;span&gt; ..&#x2F;fish.tar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cgcreate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -g&lt;&#x2F;span&gt;&lt;span&gt; cpu,cpuset,memory,io,pids:siva &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# create a cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cgset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; memory.swap.max=0 siva &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# set swap to 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cgset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; memory.max=300000000 siva &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# set memory max to 300MB
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# execute the command in that cgroup, `unshare` for creating new namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# chroot for making the current directory root, mount proc, change hostname
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cgexec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cpu,memory::&#x2F;siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    unshare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -fmuipn --mount-proc &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    chroot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;PWD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;        &#x2F;bin&#x2F;mount -t proc proc &#x2F;proc &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;        hostname mycontainer &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;        &#x2F;usr&#x2F;bin&#x2F;fish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates 3 pids, you can check it in &lt;code&gt;&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;siva&#x2F;pids.current&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;        2482  0.0  0.0   5580   912 pts&#x2F;0    S    03:55   0:00 unshare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -fmuipn --mount-proc&lt;&#x2F;span&gt;&lt;span&gt; chroot ....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;        2483  0.0  0.0   1520     4 pts&#x2F;0    S    03:55   0:00 &#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;bin&#x2F;mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; proc proc &#x2F;pro
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;        2486  0.3  0.0  10468  3672 pts&#x2F;0    S+   03:55   0:00 &#x2F;usr&#x2F;bin&#x2F;fish
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In your new namespace&#x2F;container, list of processes are&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; root       0:00 &#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;bin&#x2F;mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; proc proc &#x2F;proc &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt; mycontainer &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt; root       0:00 &#x2F;usr&#x2F;bin&#x2F;fish
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt; root       0:00 ps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can check the current usage with &lt;code&gt;sudo cgget -r memory.current siva&lt;&#x2F;code&gt;. We crash the container by allocating &amp;gt;300MB of memory, and checking memory usage simultaneously.&lt;&#x2F;p&gt;
&lt;p&gt;In your fish shell,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;root@mycontainer &#x2F;# set A 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
&lt;&#x2F;span&gt;&lt;span&gt;root@mycontainer &#x2F;# for a in (seq 10)
&lt;&#x2F;span&gt;&lt;span&gt;                        set A = &amp;quot;$A$A&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    end
&lt;&#x2F;span&gt;&lt;span&gt;root@mycontainer &#x2F;# for a in (seq 10)
&lt;&#x2F;span&gt;&lt;span&gt;                        set A = &amp;quot;$A$A&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    end
&lt;&#x2F;span&gt;&lt;span&gt;Killed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;support&quot;&gt;Support&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cgroupv1&lt;&#x2F;code&gt; tools like &lt;code&gt;cgcreate&lt;&#x2F;code&gt; and &lt;code&gt;cgset&lt;&#x2F;code&gt; etc. (from libcgroup) has &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libcgroup&#x2F;libcgroup&#x2F;issues&#x2F;12&quot;&gt;support&lt;&#x2F;a&gt; for &lt;code&gt;cgroupsv2&lt;&#x2F;code&gt;. These tools have the same interface as &lt;code&gt;cgroupv1&lt;&#x2F;code&gt;, that&#x27;s why it doesn&#x27;t feel natural&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_enterprise_linux&#x2F;8&#x2F;html&#x2F;managing_monitoring_and_updating_the_kernel&#x2F;using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel&quot;&gt;Redhat docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;conf&#x2F;ndctechtown2021&#x2F;cgroups-v2-part-1-intro-NDC-TechTown-2021-Kerrisk.pdf&quot;&gt;Cgroups v2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Namespaces</title>
		<published>2022-06-22T10:45:55+09:00</published>
		<updated>2022-06-22T10:45:55+09:00</updated>
		<link href="https://trickster.github.io/posts/namespaces/" type="text/html"/>
		<id>https://trickster.github.io/posts/namespaces/</id>
		<content type="html">&lt;p&gt;Sources -&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;0kJPa-1FuoI?t=151&quot;&gt;https:&#x2F;&#x2F;youtu.be&#x2F;0kJPa-1FuoI?t=151&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=73nB9-HYbAI&amp;amp;list=PLPEqSODQbwFjVfdvqOz_ZOOto0SnjtPYx&amp;amp;index=15&quot;&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=73nB9-HYbAI&amp;amp;list=PLPEqSODQbwFjVfdvqOz_ZOOto0SnjtPYx&amp;amp;index=15&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Some conferences&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kernel-recipes.org&#x2F;en&#x2F;2022&#x2F;&quot;&gt;https:&#x2F;&#x2F;kernel-recipes.org&#x2F;en&#x2F;2022&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Error handling in Rust</title>
		<published>2021-06-11T08:10:55+09:00</published>
		<updated>2021-06-11T08:10:55+09:00</updated>
		<link href="https://trickster.github.io/posts/error-handling/" type="text/html"/>
		<id>https://trickster.github.io/posts/error-handling/</id>
		<content type="html">&lt;h2 id=&quot;creating-new-error-types&quot;&gt;Creating new error types&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s wrap std library errors with our Errors&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;use std::fmt; 
&lt;&#x2F;span&gt;&lt;span&gt;use std::fmt::Debug; 
&lt;&#x2F;span&gt;&lt;span&gt;use std::num::{ParseIntError, ParseFloatError}; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)] 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    Error1, 
&lt;&#x2F;span&gt;&lt;span&gt;    Error2 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need to implement fmt::Display for our Errors.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;fmt::Display for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;fmt::Formatter) -&amp;gt; fmt::Result { 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;            MyErrors::Error1 =&amp;gt; write!(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my first error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            MyErrors::Error2 =&amp;gt; write!(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my second error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), 
&lt;&#x2F;span&gt;&lt;span&gt;        } 
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s implement our own function to test this [1]&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test_error1&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), MyErrors&amp;gt; { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()?; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()?; 
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(()) 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test_error2&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), MyErrors&amp;gt; { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()?; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()?; 
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(()) 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above one raises error, because Rust doesn&#x27;t know how to convert ParseIntError to MyErrors. We need to implement them using From trait.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ParseIntError&amp;gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;: ParseIntError) -&amp;gt; MyErrors { 
&lt;&#x2F;span&gt;&lt;span&gt;        MyErrors::Error1 
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ParseFloatError&amp;gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;: ParseFloatError) -&amp;gt; MyErrors { 
&lt;&#x2F;span&gt;&lt;span&gt;        MyErrors::Error2
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also avoid the above step and convert it explicitly using&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;().map_err(|_| MyErrors::Error1)?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But, implementing From once and using it everywhere is less verbose.&lt;&#x2F;p&gt;
&lt;p&gt;We can use these in our main function which returns our error type on failure.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), MyErrors&amp;gt; { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;test_error1()?;     
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Err(e) = test_error1() { 
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Error message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e) 
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Err(e) = test_error2() { 
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Error message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e) 
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(()) 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we want to use &lt;code&gt;std::error::Error&lt;&#x2F;code&gt; in main, we need to implement it for &lt;code&gt;MyErrors&lt;&#x2F;code&gt; using&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std::error::Error for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors&lt;&#x2F;span&gt;&lt;span&gt;{} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can use&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Full working example using everything above. Remember if you don&#x27;t want infallible main, you can just print the error message in main if any, otherwise use &lt;code&gt;?&lt;&#x2F;code&gt; operator.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-underlying-errors&quot;&gt;Wrapping underlying errors&lt;&#x2F;h2&gt;
&lt;p&gt;We can create our error type that can directly wrap underlying error and print backtrace.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)] 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    Error1(ParseIntError), 
&lt;&#x2F;span&gt;&lt;span&gt;    Error2(ParseFloatError) 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Implement Display
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;fmt::Display for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;fmt::Formatter) -&amp;gt; fmt::Result { 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;             MyErrors::Error1(..) =&amp;gt; write!(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my first error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; wrap ParseIntError 
&lt;&#x2F;span&gt;&lt;span&gt;             MyErrors::Error2(..) =&amp;gt; write!(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my second error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; wrap ParseFloatError 
&lt;&#x2F;span&gt;&lt;span&gt;        } 
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need to implement From for converting error types from one to another&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; convert ParseIntError to MyErrors::Error1 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ParseIntError&amp;gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;: ParseIntError) -&amp;gt; MyErrors { 
&lt;&#x2F;span&gt;&lt;span&gt;        MyErrors::Error1(err) 
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; convert ParseFloatError to MyErrors::Error1 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ParseFloatError&amp;gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;: ParseFloatError) -&amp;gt; MyErrors { 
&lt;&#x2F;span&gt;&lt;span&gt;        MyErrors::Error2(err) 
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use the same test functions as above [1] and we need backtrace. For backtrace, instead of empty impl &lt;code&gt;std::error::Error&lt;&#x2F;code&gt; for our error type, we can implement source&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std::error::Error for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; if you want source of the error ---- 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; In our case display error message related to 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ParseIntError or ParseFloatError 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;&amp;amp;(dyn std::error::Error + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; { 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;            MyErrors::Error1(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; e) =&amp;gt; Some(e), 
&lt;&#x2F;span&gt;&lt;span&gt;            MyErrors::Error2(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; e) =&amp;gt; Some(e), 
&lt;&#x2F;span&gt;&lt;span&gt;        } 
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we have our main function like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; test_error1()?; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Err(e) = test_error1() { 
&lt;&#x2F;span&gt;&lt;span&gt;         println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Error message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e); 
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(source) = e.source() { 
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; Caused by: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, source); 
&lt;&#x2F;span&gt;&lt;span&gt;         } 
&lt;&#x2F;span&gt;&lt;span&gt;     } 
&lt;&#x2F;span&gt;&lt;span&gt;     Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We get this output&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt; message: my first error
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Caused&lt;&#x2F;span&gt;&lt;span&gt; by: invalid digit found in string
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=a7d10bf89ae970fca143d494d11c0e95&quot;&gt;Playground&lt;&#x2F;a&gt; for above -- with boilerplate&lt;&#x2F;p&gt;
&lt;p&gt;To create our own error type, we implemented, From conversions, std::error::Error and it&#x27;s methods. In order to avoid all these, we can use a trait called &lt;code&gt;thiserror&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(thiserror::Error, Debug)] 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyErrors &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my first error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)] 
&lt;&#x2F;span&gt;&lt;span&gt;    Error1(#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;] ParseIntError), 
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my second error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)] 
&lt;&#x2F;span&gt;&lt;span&gt;    Error2(#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;] ParseFloatError) 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above implements custom error type with our message, from conversions and backtrace.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=e50690f48555da81474b98ad4b0d98dd&quot;&gt;Playground&lt;&#x2F;a&gt; for above -- using &lt;code&gt;thiserror&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Both of these, produce the same output. Using thiserror reduced the code size by half in our example&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Worker Queues</title>
		<published>2021-05-27T08:10:55+09:00</published>
		<updated>2021-05-27T08:10:55+09:00</updated>
		<link href="https://trickster.github.io/posts/worker-queues/" type="text/html"/>
		<id>https://trickster.github.io/posts/worker-queues/</id>
		<content type="html">&lt;p&gt;Tried Beanstalkerd, for a job queue, realized the language support is not very good. But, I realized Redis has Lists. We can use them to push (from producer) and pop (worker&#x2F;consumer)&lt;&#x2F;p&gt;
&lt;p&gt;Producer pushes&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; RPUSH list2 0
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;) 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; RPUSH list2 1
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;) 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; RPUSH list2 2
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;) 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; RPUSH list2 3
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;) 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; RPUSH list2 4
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;integer&lt;&#x2F;span&gt;&lt;span&gt;) 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Consumer pulls from the queue&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; BLPOP list2 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; BLPOP list2 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; BLPOP list2 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; BLPOP list2 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;127.0.0.1:6379&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; BLPOP list2 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also push multiple items to the list, and have multiple consumers listening to the same list with no duplication. P.S. - &amp;quot;B&amp;quot; in &amp;quot;BLPOP&amp;quot; is blocking operation, waits for the message from the queue&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Advanced python</title>
		<published>2020-05-28T00:00:00+00:00</published>
		<updated>2020-05-28T00:00:00+00:00</updated>
		<link href="https://trickster.github.io/posts/class/" type="text/html"/>
		<id>https://trickster.github.io/posts/class/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer: Everything below is typed Python&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dataclasses&quot;&gt;Dataclasses&lt;&#x2F;h2&gt;
&lt;p&gt;The following snippet, desugars to&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Snippet 1:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dataclass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    name: str
&lt;&#x2F;span&gt;&lt;span&gt;    age: float
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Snippet 2:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;: float):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name = name
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.age = age
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two patterns to create dataclasses&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Immutable class&lt;&#x2F;li&gt;
&lt;li&gt;Mutable class&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;immutable-dataclasses&quot;&gt;Immutable dataclasses&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;Snippet 3:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dataclass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;frozen&lt;&#x2F;span&gt;&lt;span&gt;=True)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    name: str
&lt;&#x2F;span&gt;&lt;span&gt;    age: float
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;classmethod
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from_birthyear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;birth_year&lt;&#x2F;span&gt;&lt;span&gt;: int) -&amp;gt; Person:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;(name, date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;today&lt;&#x2F;span&gt;&lt;span&gt;().year - birth_year)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;staticmethod
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from_fathers_age&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fathers_age&lt;&#x2F;span&gt;&lt;span&gt;: int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;diff_from_fathers_age&lt;&#x2F;span&gt;&lt;span&gt;: int
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Person:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;(name, fathers_age - diff_from_fathers_age)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;staticmethod
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;nationality&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; All are japanese &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Japan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(Person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;nationality&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(Person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;from_fathers_age&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;me = Person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;from_birthyear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1992&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(me.age)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mutable-dataclasses&quot;&gt;Mutable dataclasses&lt;&#x2F;h3&gt;
&lt;p&gt;Field names can start with underscore, so that &lt;code&gt;@property&lt;&#x2F;code&gt; getters can use the method names without underscore at the beginning. Private fields are to be started with double underscores. &lt;code&gt;name&lt;&#x2F;code&gt; does not work as a field name, but &lt;code&gt;_name&lt;&#x2F;code&gt; is fine. We can then create &lt;code&gt;@property&lt;&#x2F;code&gt; with method name as &lt;code&gt;name&lt;&#x2F;code&gt;. It&#x27;s a good practice to &lt;strong&gt;access the fields using property getters&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Snippet 4:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dataclass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MutablePerson&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; Another note:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; _name works but not name, because I created a property name &amp;quot;name&amp;quot; was created for it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _name: str
&lt;&#x2F;span&gt;&lt;span&gt;    __age: float
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;classmethod
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from_birthyear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;birth_year&lt;&#x2F;span&gt;&lt;span&gt;: int) -&amp;gt; Person:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;(name, date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;today&lt;&#x2F;span&gt;&lt;span&gt;().year - birth_year)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;staticmethod
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from_fathers_age&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fathers_age&lt;&#x2F;span&gt;&lt;span&gt;: int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;diff_from_fathers_age&lt;&#x2F;span&gt;&lt;span&gt;: int
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Person:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;(name, fathers_age - diff_from_fathers_age)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;staticmethod
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;nationality&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; All are japanese &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Japan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;setter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name_value&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; None:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._name = name_value
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;mutable person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MutablePerson&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;)._MutablePerson__age)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MutablePerson&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Noona&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;)._name)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(MutablePerson.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;from_birthyear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1992&lt;&#x2F;span&gt;&lt;span&gt;).name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    MutablePerson.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;from_birthyear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1992&lt;&#x2F;span&gt;&lt;span&gt;)._name
&lt;&#x2F;span&gt;&lt;span&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# generally not preferred, you create a property getter like above
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;siva = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MutablePerson&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(siva.name)
&lt;&#x2F;span&gt;&lt;span&gt;siva.name += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;ram&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(siva.name)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another example&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Snippet 5:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dataclass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _name: str
&lt;&#x2F;span&gt;&lt;span&gt;    _company: str
&lt;&#x2F;span&gt;&lt;span&gt;    _retired: str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;company&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._company
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @company.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;setter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;company&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._company = value
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;e = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Siva&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Rakuten&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Company name is :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e.company)
&lt;&#x2F;span&gt;&lt;span&gt;e.company = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Google&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Company name is :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e.company)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;staticmethod-vs-classmethod&quot;&gt;&lt;code&gt;@staticmethod&lt;&#x2F;code&gt; vs &lt;code&gt;@classmethod&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We can use either annotation to create a class from their methods. &lt;code&gt;@classmethod&lt;&#x2F;code&gt; takes class as first argument. As a rule of thumb, if your methods accesses other variables&#x2F;methods in the class, we can use &lt;code&gt;@classmethod&lt;&#x2F;code&gt;. &lt;code&gt;@staticmethod&lt;&#x2F;code&gt; does not access any of the classes&#x27;s properties. We can also use &lt;code&gt;@staticmethod&lt;&#x2F;code&gt; to create a class like &lt;em&gt;Snipprt 3:&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;typing-in-python&quot;&gt;Typing in Python&lt;&#x2F;h2&gt;
&lt;p&gt;If we want to use class types inside the class, we need to use this import at the top of the file. This will become default in Python 4.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;__future__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;annotations
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, the return type of &lt;code&gt;from_birthyear&lt;&#x2F;code&gt; is &lt;code&gt;Person&lt;&#x2F;code&gt; but this only works when we import &lt;code&gt;annotations&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dataclass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;frozen&lt;&#x2F;span&gt;&lt;span&gt;=True)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;classmethod
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from_birthyear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;birth_year&lt;&#x2F;span&gt;&lt;span&gt;: int) -&amp;gt; Person:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;(name, date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;today&lt;&#x2F;span&gt;&lt;span&gt;().year - birth_year)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;normal-classes&quot;&gt;Normal classes&lt;&#x2F;h2&gt;
&lt;p&gt;For arbitrary initialization of class objects, we always use &lt;code&gt;__init__&lt;&#x2F;code&gt;. We cannot create &lt;code&gt;_randomly_fill&lt;&#x2F;code&gt; when we use &lt;code&gt;@dataclass&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;dataclasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;dataclass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Enum
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;typing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;NamedTuple, List
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Cell&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;EMPTY &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;BLOCKED &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;START &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;GOAL &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;PATH &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Alternate version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;class MazeLocation(NamedTuple):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; row: int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; column: int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dataclass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MazeLocation&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    row: int
&lt;&#x2F;span&gt;&lt;span&gt;    column: int
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Maze&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;: int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;columns&lt;&#x2F;span&gt;&lt;span&gt;: int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sparseness&lt;&#x2F;span&gt;&lt;span&gt;: float = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;: MazeLocation = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MazeLocation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span&gt;: MazeLocation = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MazeLocation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; None:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._rows = rows
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._columns = columns
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.start: MazeLocation = start
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.goal: MazeLocation = goal
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# fill grid with empty cells
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._grid: List[List[Cell]] = [
&lt;&#x2F;span&gt;&lt;span&gt;            [Cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;EMPTY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(columns)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(rows)
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_randomly_fill&lt;&#x2F;span&gt;&lt;span&gt;(rows, columns, sparseness)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._grid[start.row][start.column] = Cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;START
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._grid[goal.row][goal.column] = Cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;GOAL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;_randomly_fill&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;: int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;columns&lt;&#x2F;span&gt;&lt;span&gt;: int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sparseness&lt;&#x2F;span&gt;&lt;span&gt;: float):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(rows):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(columns):
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uniform&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._grid[row][column] = Cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;BLOCKED
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;__str__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;        output: str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._grid:
&lt;&#x2F;span&gt;&lt;span&gt;            output += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;([c.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;row]) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;maze = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Maze&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(maze)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another small note about property in Python class.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If it&#x27;s a property, we can call the property directly without parans&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Example&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Stack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Generic&lt;&#x2F;span&gt;&lt;span&gt;[T]):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; None:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._container = []
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; bool:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._container
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;a = Stack[int]()
&lt;&#x2F;span&gt;&lt;span&gt;a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;StackWithEmptyProperty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Generic&lt;&#x2F;span&gt;&lt;span&gt;[T]):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; None:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._container = []
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; bool:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._container
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;a = Stack[int]()
&lt;&#x2F;span&gt;&lt;span&gt;a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(a.empty)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Gaussian processes and Bayesian optimization</title>
		<published>2020-04-15T00:00:00+00:00</published>
		<updated>2020-04-15T00:00:00+00:00</updated>
		<link href="https://trickster.github.io/posts/gp/" type="text/html"/>
		<id>https://trickster.github.io/posts/gp/</id>
		<content type="html">&lt;p&gt;This should be pasted in &lt;a href=&quot;https:&#x2F;&#x2F;upmath.me&quot;&gt;upmath&lt;&#x2F;a&gt; to get all the latex equations in SVG format for posting on svbtle blog. I use mathpix notes because it syncs all my snips and I can insert raw images served from Mathpix CDN (made from Mathpix notes).&lt;&#x2F;p&gt;
&lt;p&gt;Sources:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mitpress.mit.edu&#x2F;books&#x2F;algorithms-optimization&quot;&gt;Algorithms for optimization&lt;&#x2F;a&gt; book&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pyro.ai&#x2F;examples&#x2F;bo.html&quot;&gt;Pyro&lt;&#x2F;a&gt;&#x27;s documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;motivation-behind-these-optimization-techniques&quot;&gt;Motivation behind these optimization techniques&lt;&#x2F;h2&gt;
&lt;p&gt;For many optimization problems, function evaluations can be quite expensive. For example, deep learning parameters may require a week of GPU training. A common approach to build a &lt;em&gt;surrogate model&lt;&#x2F;em&gt;, which is a model of the optimization problem that can be efficiently optimized in lieu of the true objective function. Further evaluations of the true objective function can be used to improve the model. Fitting such models requires an initial set of points&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sampling-plans&quot;&gt;Sampling plans&lt;&#x2F;h2&gt;
&lt;p&gt;These are sampling plans for covering the search space when we have limited resources.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;full-factorial&quot;&gt;Full factorial&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;em&gt;full factorial&lt;&#x2F;em&gt; sampling plan places a grid of evenly spaced points over the search space. This approach is easy to implement, does not rely on randomness, and covers the space, but it uses a large number of points. Sampling grid is bounded as shown in the picture&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.mathpix.com&#x2F;snip&#x2F;images&#x2F;0vpLGVPhZB1DnjFeZUd7XPn03bpK17u0ZbIMdYpBuPM.original.fullsize.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exponentially increase design points when the dimensionality high.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;random-sampling&quot;&gt;Random sampling&lt;&#x2F;h3&gt;
&lt;p&gt;Draw m random samples over the design space.&lt;&#x2F;p&gt;
&lt;p&gt;A uniform projection plan is a sampling plan over a discrete grid where the dis- tribution over each dimension is uniform.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.mathpix.com&#x2F;snip&#x2F;images&#x2F;o_0tCEn2Rb6fSu52cE72G_lRFSC69D1wjyN1d1vE_M0.original.fullsize.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stratified-sampling&quot;&gt;Stratified sampling&lt;&#x2F;h3&gt;
&lt;p&gt;An $m \times m$ grid could miss important information due to systematic regularities. Cells are sampled at a point chosen uni- formly at random from within the cell rather than at the cell’s center&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.mathpix.com&#x2F;snip&#x2F;images&#x2F;hchZo2Qlz8EyP5bTXzv3vrly-u_VYjYSio_LuyLoPw0.original.fullsize.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are several other sampling plans. We skip for now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;surrogate-models&quot;&gt;Surrogate models&lt;&#x2F;h2&gt;
&lt;p&gt;Now we discuss how to use these samples to construct models of the objective function that can be used in place of the real objective function. These &lt;em&gt;surrogate&lt;&#x2F;em&gt; models are inexpensive to calculate&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fitting-models&quot;&gt;Fitting models&lt;&#x2F;h3&gt;
&lt;p&gt;Suppose we have $m$ design points $X=\left\{\mathbf{x}^{(1)},\mathbf{x}^{(2)},\ldots,\mathbf{x}^{(m)}\right\}$ and function evaluations $\mathbf{y}=\left\{y^{(1)}, y^{(2)}, \ldots, y^{(m)}\right\}$, the model will predict&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\hat{\mathbf{y}}=\left\{\hat{f}_{\mathbf{\theta}}\left(\mathbf{x}^{(1)}\right), \hat{f}_{\mathbf{\theta}}\left(\mathbf{x}^{(2)}\right), \ldots, \hat{f}_{\mathbf{\theta}}\left(\mathbf{x}^{(m)}\right)\right\}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A surrogate model $\hat{f}$ parameterized by $\theta$ is designed to mimic the true objective function $f$. The parameters $\theta$ can be adjusted to fit the model based on samples collected from $f$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\underset{\theta}{\operatorname{minimize}} \quad\|\mathbf{y}-\hat{\mathbf{y}}\|_{p}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This penalizes the deviation of the model only at the data points. There is no guarantee that the model will continue to fit well away from observed data, and model accuracy typically decreases the farther we go from the sampled points. This form of model fitting is called &lt;strong&gt;regression&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;linear-models&quot;&gt;Linear models&lt;&#x2F;h3&gt;
&lt;p&gt;A simple surrogate model is the linear model, which has the form&lt;&#x2F;p&gt;
&lt;p&gt;$$\hat{f}=w_{0}+\mathbf{w}^{\top} \mathbf{x} \quad \boldsymbol{\theta}=\left\{w_{0}, \mathbf{w}\right\}$$&lt;&#x2F;p&gt;
&lt;p&gt;For an n-dimensional design space, the linear model has n + 1 parameters, and thus requires at least n + 1 samples to fit unambiguously.&lt;&#x2F;p&gt;
&lt;p&gt;$$\hat{f}=\boldsymbol{\theta}^{\top} \mathbf{x}$$&lt;&#x2F;p&gt;
&lt;p&gt;Finding an optimal θ requires solving a linear regression problem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\operatorname{minimize}_{\Theta}\|\mathbf{y}-\mathbf{X} \boldsymbol{\theta}\|_{2}^{2}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where $X$ is a design matrix formed from $m$ data points&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\mathbf{X}=\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{x}^{(1)}\right)^{\top} \\
&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{x}^{(2)}\right)^{\top} \\
&lt;&#x2F;span&gt;&lt;span&gt;\vdots \\
&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{x}^{(m)}\right)^{\top}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Linear regression has an analytic solution&lt;&#x2F;p&gt;
&lt;p&gt;$$\theta=X^{+} y$$&lt;&#x2F;p&gt;
&lt;p&gt;where $X^+$ is the Moore-Penrose pseudoinverse of $X$. In Julia, this is &lt;code&gt;pinv&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$$\mathbf{X}^{+}=\mathbf{X}^{\top}\left(\mathbf{X} \mathbf{X}^{\top}\right)^{-1}$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;basis-functions&quot;&gt;Basis functions&lt;&#x2F;h3&gt;
&lt;p&gt;The linear model is a linear combination of the components of $x$:&lt;&#x2F;p&gt;
&lt;p&gt;$$\hat{f}(\mathbf{x})=\theta_{1} x_{1}+\cdots+\theta_{n} x_{n}=\sum_{i=1}^{n} \theta_{i} x_{i}=\theta^{\top} \mathbf{x}$$&lt;&#x2F;p&gt;
&lt;p&gt;which is a specific example of a more general linear combination of basis functions&lt;&#x2F;p&gt;
&lt;p&gt;$$\hat{f}(\mathbf{x})=\theta_{1} b_{1}(\mathbf{x})+\cdots+\theta_{q} b_{q}(\mathbf{x})=\sum_{i=1}^{q} \theta_{i} b_{i}(\mathbf{x})=\theta^{\top} \mathbf{b}(\mathbf{x})$$&lt;&#x2F;p&gt;
&lt;p&gt;This solves this problem&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\operatorname{minimize}_{\mathbf{\theta}}\|\mathbf{y}-\mathbf{B} \theta\|_{2}^{2}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;other-methods&quot;&gt;Other methods&lt;&#x2F;h3&gt;
&lt;p&gt;There are polynomial basis functions, sinosoidal and radial basis functions. All of these have their own curve fitting properties&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fitting-noisy-objective-functions&quot;&gt;Fitting Noisy Objective Functions&lt;&#x2F;h3&gt;
&lt;p&gt;Models fit using regression will pass as close as possible to every design point. When the objective function evaluations are noisy, complex models are likely to excessively contort themselves to pass through every point. However, smoother fits are often better predictors of the true underlying objective function.&lt;&#x2F;p&gt;
&lt;p&gt;We add &lt;em&gt;regularization&lt;&#x2F;em&gt; (L2) term to linear models specified above.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\operatorname{minimize}_{\theta}\|\mathbf{y}-\mathbf{B} \theta\|_{2}^{2}+\lambda\|\mathbf{\theta}\|_{2}^{2}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;which-model-to-choose&quot;&gt;Which model to choose?&lt;&#x2F;h3&gt;
&lt;p&gt;Generalization error can be estimated using techniques such as holdout, k-fold cross validation, and the bootstrap.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;probablistic-surrogate-models&quot;&gt;Probablistic surrogate models&lt;&#x2F;h2&gt;
&lt;p&gt;When using surrogate models for the purpose of optimization, it is often useful to quantify our confidence in the predictions of these models. One way to quantify our confidence is by taking a probabilistic approach to surrogate modeling. Most common one is &lt;strong&gt;Guassian Process&lt;&#x2F;strong&gt; which represents a distribution over functions.&lt;&#x2F;p&gt;
&lt;p&gt;We use Gaussian processes to infer a distribution over the values of different design points given the values of previously evaluated design points. We can incorporate gradient information and noisy measurements of the objective functions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;guassian-distribution&quot;&gt;Guassian distribution&lt;&#x2F;h3&gt;
&lt;p&gt;n-dimensional is parameterized&lt;&#x2F;p&gt;
&lt;p&gt;$$\mathcal{N}(\mathbf{x} | \boldsymbol{\mu}, \mathbf{\Sigma})=(2 \pi)^{-n &#x2F; 2}|\mathbf{\Sigma}|^{-1 &#x2F; 2} \exp \left(-\frac{1}{2}(\mathbf{x}-\boldsymbol{\mu})^{\top} \boldsymbol{\Sigma}^{-1}(\mathbf{x}-\boldsymbol{\mu})\right)$$&lt;&#x2F;p&gt;
&lt;p&gt;Covariance matrices are always positive semidefinite. Sampled value is&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\mathbf{x} \sim \mathcal{N}(\boldsymbol{\mu}, \mathbf{\Sigma})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some examples&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.mathpix.com&#x2F;snip&#x2F;images&#x2F;bqFWltlkHv4WeYGf9lP0Ms4vLbmyhFxNdYidfbS6_n8.original.fullsize.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two jointly Gaussian random variables a and b can be written&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{a} \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{b}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right] \sim \mathcal{N}\left(\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;\boldsymbol{\mu}_{\mathbf{a}} \\
&lt;&#x2F;span&gt;&lt;span&gt;\boldsymbol{\mu}_{\mathbf{b}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right],\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{ll}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{A} &amp;amp; \mathbf{C} \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{C}^{\top} &amp;amp; \mathbf{B}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We choose &lt;code&gt;MvNormal&lt;&#x2F;code&gt; because &lt;em&gt;marginal distribution&lt;&#x2F;em&gt; for a vector of random variables is given by its corresponding mean and covariance&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\mathbf{a} \sim \mathcal{N}\left(\boldsymbol{\mu}_{\mathrm{a}}, \mathbf{A}\right) \quad \mathbf{b} \sim \mathcal{N}\left(\boldsymbol{\mu}_{\mathbf{b}}, \mathbf{B}\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and conditional distribution has a convenient closed form&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{a} | \mathbf{b} \sim \mathcal{N}\left(\mu_{\mathrm{a} | \mathbf{b}}, \mathbf{\Sigma}_{\mathrm{a} | \mathbf{b}}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\boldsymbol{\mu}_{\mathrm{a} | \mathbf{b}}=\boldsymbol{\mu}_{\mathrm{a}}+\mathbf{C B}^{-1}\left(\mathbf{b}-\boldsymbol{\mu}_{\mathbf{b}}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{\Sigma}_{\mathrm{a} | \mathbf{b}}=\mathbf{A}-\mathbf{C B}^{-1} \mathbf{C}^{\top}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Simple example&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;x_{1} \\
&lt;&#x2F;span&gt;&lt;span&gt;x_{2}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right] \sim \mathcal{N}\left(\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;0 \\
&lt;&#x2F;span&gt;&lt;span&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right],\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{ll}
&lt;&#x2F;span&gt;&lt;span&gt;3 &amp;amp; 1 \\
&lt;&#x2F;span&gt;&lt;span&gt;1 &amp;amp; 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The marginal distribution for $x_1$ is N (0, 3), and the marginal distribution for $x_2$ is $N (1, 2)$.&lt;&#x2F;p&gt;
&lt;p&gt;The conditional distribution for $x_1$ given $x_2 = 2$ is&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\boldsymbol{\mu}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;} &amp;amp;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;\cdot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} \cdot(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;\\
&lt;&#x2F;span&gt;&lt;span&gt;\boldsymbol{\Sigma}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;} &amp;amp;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;\cdot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} \cdot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2.5 &lt;&#x2F;span&gt;&lt;span&gt;\\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} |\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;\right) &amp;amp; \sim \mathcal{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2.5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guassian-processes&quot;&gt;Guassian processes&lt;&#x2F;h3&gt;
&lt;p&gt;we approximated the objective function f using a surrogate model function $f^{hat}$ fitted to previously evaluated design points. A special type of surrogate model known as a Gaussian process allows us not only to predict $f$ but also to quantify our uncertainty in that prediction using a probability distribution&lt;&#x2F;p&gt;
&lt;p&gt;A Gaussian process is a distribution over functions. For any finite set of points $\left\{\mathbf{x}^{(1)}, \ldots, \mathbf{x}^{(m)}\right\}$, the associated function evaluations $\left\{y_{1}, \ldots, y_{m}\right\}$ are distributed according to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;y_{1} \\
&lt;&#x2F;span&gt;&lt;span&gt;\vdots \\
&lt;&#x2F;span&gt;&lt;span&gt;y_{m}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right] \sim \mathcal{N}\left(\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;m\left(\mathbf{x}^{(1)}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\vdots \\
&lt;&#x2F;span&gt;&lt;span&gt;m\left(\mathbf{x}^{(m)}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right],\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{ccc}
&lt;&#x2F;span&gt;&lt;span&gt;k\left(\mathbf{x}^{(1)}, \mathbf{x}^{(1)}\right) &amp;amp; \cdots &amp;amp; k\left(\mathbf{x}^{(1)}, \mathbf{x}^{(m)}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\vdots &amp;amp; \ddots &amp;amp; \vdots \\
&lt;&#x2F;span&gt;&lt;span&gt;k\left(\mathbf{x}^{(m)}, \mathbf{x}^{(1)}\right) &amp;amp; \cdots &amp;amp; k\left(\mathbf{x}^{(m)}, \mathbf{x}^{(m)}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where m(x) ($m(\mathbf{x})=\mathbb{E}[f(\mathbf{x})]$ ) is &lt;em&gt;mean function&lt;&#x2F;em&gt; and k(x, x&#x27;) ( $k\left(\mathbf{x}, \mathbf{x}^{\prime}\right)=$
$\mathbb{E}\left[(f(\mathbf{x})-m(\mathbf{x}))\left(f\left(\mathbf{x}^{\prime}\right)-m\left(\mathbf{x}^{\prime}\right)\right)\right]$ ) is &lt;em&gt;covariance function&lt;&#x2F;em&gt; or &lt;em&gt;&lt;strong&gt;kernel&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;. The mean function can represent prior knowledge about the function. The kernel controls the smoothness of the functions.&lt;&#x2F;p&gt;
&lt;p&gt;Example psuedo code&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.mathpix.com&#x2F;snip&#x2F;images&#x2F;xknDFDS7v7rpHb8GLvDsCm_Z3BzWYulKP4MnYryx1mw.original.fullsize.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Common kernel function is squared exponential. There are several others, usually they use &lt;code&gt;r&lt;&#x2F;code&gt; which is euclidean distance between x and x&#x27;. Matern Kernel uses gamma function and and Kν(x) is the modified Bessel function of the second kind, for example&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\frac{2^{1-v}}{\Gamma(v)}\left(\sqrt{2 v} \frac{r}{\ell}\right)^{v} K_{v}\left(\sqrt{2 v} \frac{r}{\ell}\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;prediction&quot;&gt;Prediction&lt;&#x2F;h3&gt;
&lt;p&gt;Suppose we already have a set of points X and the corresponding y, but we wish to predict the values yˆ at points $X^{*}$. The joint distribution is&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;\hat{\mathbf{y}} \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{y}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right] \sim \mathcal{N}\left(\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}\left(X^{*}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}(X)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right],\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{ll}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}\left(X^{*}, X^{*}\right) &amp;amp; \mathbf{K}\left(X^{*}, X\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}\left(X, X^{*}\right) &amp;amp; \mathbf{K}(X, X)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where m and k are&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp;=\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)}\right), \ldots, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)}\right)\right] \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{\prime}\right) &amp;amp;=\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ccc&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)}, \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{\prime}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)\right. &amp;amp; \cdots &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)}, \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{\prime(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;)}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\vdots &amp;amp; \ddots &amp;amp; \vdots \\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)}, \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{\prime(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)}\right) &amp;amp; \cdots &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;\left(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)}, \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{\prime(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;)}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Therefore the conditional distribution is given by,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\hat{\mathbf{y}} | \mathbf{y} \sim \mathcal{N}(\underbrace{\mathbf{m}\left(X^{*}\right)+\mathbf{K}\left(X^{*}, X\right) \mathbf{K}(X, X)^{-1}(\mathbf{y}-\mathbf{m}(X))}_{\text {mean }}, \underbrace{\mathbf{K}\left(X^{*}, X^{*}\right)-\mathbf{K}\left(X^{*}, X\right) \mathbf{K}(X, X)^{-1} \mathbf{K}\left(X, X^{*}\right)}_{\text {covariance }})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note, that the covariance is not dependent on y. This distribution is often referred to as the posterior distribution. In julia, &lt;code&gt;mvnrand(μ(X, GP.m), Σ(X, GP.k))&lt;&#x2F;code&gt;. The predicted mean&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\hat{\mu}(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}) &amp;amp;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;})+\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;)^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;}-\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;)) \\
&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;})+\boldsymbol{\theta}^{\top} \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where $\boldsymbol{\theta}=\mathbf{K}(X, X)^{-1}(\mathbf{y}-\mathbf{m}(X))$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The value of the Gaussian process beyond the surrogate models discussed previously is that it also quantifies our uncertainty in our predictions.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The variance of the predicted mean can also be obtained as a function of x: $\hat{v}(\mathbf{x})=\mathbf{K}(\mathbf{x}, \mathbf{x})-\mathbf{K}(\mathbf{x}, X) \mathbf{K}(X, X)^{-1} \mathbf{K}(X, \mathbf{x})$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;incorporating-gradient-measurements&quot;&gt;Incorporating gradient measurements&lt;&#x2F;h3&gt;
&lt;p&gt;Gaussian processes can be extended to incorporate gradients&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{y} \\
&lt;&#x2F;span&gt;&lt;span&gt;\nabla \mathbf{y}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right] \sim \mathcal{N}\left(\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}_{f} \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}_{\nabla}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right],\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{cc}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}_{f f} &amp;amp; \mathbf{K}_{f \nabla} \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}_{\nabla f} &amp;amp; \mathbf{K}_{\nabla \nabla}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where $\mathbf{y} \sim \mathcal{N}\left(\mathbf{m}_{f}, \mathbf{K}_{f f}\right)$ is a traditional guassian process, $m_{\nabla}$ is a mean function of the gradient, $K_{\nabla f}$ is covariance matrix between function values and gradients etc.&lt;&#x2F;p&gt;
&lt;p&gt;The linearity of Gaussians causes these covariance functions to be related&lt;&#x2F;p&gt;
&lt;p&gt;$\begin{aligned} k_{f f}\left(\mathbf{x}, \mathbf{x}^{\prime}\right) &amp;amp;=k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) \ k_{\nabla f}\left(\mathbf{x}, \mathbf{x}^{\prime}\right) &amp;amp;=\nabla_{\mathbf{x}} k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) \ k_{f \nabla}\left(\mathbf{x}, \mathbf{x}^{\prime}\right) &amp;amp;=\nabla_{\mathbf{x}^{\prime}} k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) \ k_{\nabla \nabla}\left(\mathbf{x}, \mathbf{x}^{\prime}\right) &amp;amp;=\nabla_{\mathbf{x}} \nabla_{\mathbf{x}^{\prime}} k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) \end{aligned}$&lt;&#x2F;p&gt;
&lt;p&gt;Prediction can be accomplished in the same manner as with a traditional Gaussian process. We first construct the joint distribution&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;\hat{\mathbf{y}} \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{y} \\
&lt;&#x2F;span&gt;&lt;span&gt;\nabla \mathbf{y}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right] \sim \mathcal{N}\left(\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}_{f}\left(X^{*}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}_{f}(X) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}_{\nabla}(X)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right],\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{ccc}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}_{f f}\left(X^{*}, X^{*}\right) &amp;amp; \mathbf{K}_{f f}\left(X^{*}, X\right) &amp;amp; \mathbf{K}_{f \nabla}\left(X^{*}, X\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}_{f f}\left(X, X^{*}\right) &amp;amp; \mathbf{K}_{f f}(X, X) &amp;amp; \mathbf{K}_{f \nabla}(X, X) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}_{\nabla f}\left(X, X^{*}\right) &amp;amp; \mathbf{K}_{\nabla f}(X, X) &amp;amp; \mathbf{K}_{\nabla \nabla}(X, X)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The conditional distribution follows the same Gaussian relations as in equation&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\hat{\mathbf{y}} | \mathbf{y}, \nabla \mathbf{y} \sim \mathcal{N}\left(\boldsymbol{\mu}_{\nabla}, \mathbf{\Sigma}_{\nabla}\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;\boldsymbol{\mu}_{\nabla}=\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right)+\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f f&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{\nabla &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]^{\top}\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cc&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f f&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;\nabla}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{\nabla &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{\nabla \nabla}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;}-\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;\nabla \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;}-\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;}_{\nabla}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\\
&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;\boldsymbol{\Sigma}_{\nabla}=\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f f&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right)-\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cc&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f f&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{\nabla &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]^{\top}\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cc&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f f&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;\nabla}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{\nabla &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{\nabla \nabla}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f f&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}_{\nabla &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;incorporating-noisy-measurements&quot;&gt;Incorporating noisy measurements&lt;&#x2F;h3&gt;
&lt;p&gt;Joint distribution&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;\hat{\mathbf{y}} \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{y}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right] \sim \mathcal{N}\left(\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{l}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}\left(X^{*}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{m}(X)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right],\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{ll}
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}\left(X^{*}, X^{*}\right) &amp;amp; \mathbf{K}\left(X^{*}, X\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\mathbf{K}\left(X, X^{*}\right) &amp;amp; \mathbf{K}(X, X)+v \mathbf{I}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with conditional distribution&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\hat{\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;}} | \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;}, \nu &amp;amp; \sim \mathcal{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;}\left(\boldsymbol{\mu}^{*}, \mathbf{\Sigma}^{*}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\boldsymbol{\mu}^{*} &amp;amp;=\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right)+\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;\right)(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;)+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;I&lt;&#x2F;span&gt;&lt;span&gt;})^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;}-\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;)) \\
&lt;&#x2F;span&gt;&lt;span&gt;\boldsymbol{\Sigma}^{*} &amp;amp;=\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right)-\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;\right)(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;)+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span&gt;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;I&lt;&#x2F;span&gt;&lt;span&gt;})^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}\left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;^{*}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fitting-guassian-processes&quot;&gt;Fitting guassian processes&lt;&#x2F;h3&gt;
&lt;p&gt;The choice of kernel and parameters has a large effect on the form of the Gaussian process between evaluated design points.&lt;&#x2F;p&gt;
&lt;p&gt;Kernels and their parameters can be chosen using cross validation introduced in the previous chapter. Instead of minimizing the squared error on the test data, we maximize the likelihood of the data.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Likelihood math is hand-written in Cross Entropy method&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We want the parameters $\theta$ that maximizes $p(\mathbf{y} | X, \boldsymbol{\theta})$. The likelihood of the data is the probability that the observed points were drawn from the model.&lt;&#x2F;p&gt;
&lt;p&gt;We use log likelihood,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\log p(\mathbf{y} | X, v, \mathbf{\theta})=-\frac{n}{2} \log 2 \pi-\frac{1}{2} \log \left|\mathbf{K}_{\mathbf{\theta}}(X, X)+v \mathbf{I}\right|-\frac{1}{2}\left(\mathbf{y}-\mathbf{m}_{\mathbf{\theta}}(X)\right)^{\top}\left(\mathbf{K}_{\mathbf{\theta}}(X, X)+v \mathbf{I}\right)^{-1}\left(\mathbf{y}-\mathbf{m}_{\mathbf{\theta}}(X)\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let us assume a zero mean such that $\mathbf{m}_{\theta}(X)=\mathbf{0}$ and $\theta$ refers only to the parameters for the Gaussian process covariance function. We can arrive at a maximum likelihood estimate by gradient ascent.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\frac{\partial}{\partial \theta_{j}} \log p(\mathbf{y} | X, \theta)=\frac{1}{2} \mathbf{y}^{\top} \mathbf{K}^{-1} \frac{\partial \mathbf{K}}{\partial \theta_{j}} \mathbf{K}^{-1} \mathbf{y}-\frac{1}{2} \operatorname{tr}\left(\mathbf{\Sigma}_{\mathbf{\theta}}^{-1} \frac{\partial \mathbf{K}}{\partial \theta_{j}}\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\mathbf{\Sigma}_{\mathbf{\theta}}=\mathbf{K}_{\mathbf{\theta}}(X, X)+v \mathbf{I}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Results:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;\frac{\partial \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}}{\partial \boldsymbol{\theta}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;=-\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} \frac{\partial \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}}{\partial \boldsymbol{\theta}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;}} \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} \\
&lt;&#x2F;span&gt;&lt;span&gt;\frac{\partial \log |\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}|}{\partial \boldsymbol{\theta}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;=\operatorname{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;}\left(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}^{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} \frac{\partial \mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;}}{\partial \boldsymbol{\theta}_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;}}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;optimization-using-guassian-process-optimization&quot;&gt;Optimization using Guassian process optimization&lt;&#x2F;h2&gt;
&lt;p&gt;The last section discusses how to predict at a new point. We derived equations for estimating yhat at any new point. But how do we know which point to evaluate?
We want to move to a design point that minimizes our objective function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prediction-based-exploration&quot;&gt;Prediction based exploration&lt;&#x2F;h3&gt;
&lt;p&gt;In prediction-based exploration, we select the minimizer of the surrogate function.
An example of this approach is the quadratic fit. With quadratic fit search, we use a quadratic surrogate model to fit the last three bracketing points and then select the point at the minimum of the quadratic function.&lt;&#x2F;p&gt;
&lt;p&gt;If we use a Gaussian process surrogate model, prediction-based optimization has us select the minimizer of the mean function&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)}=\arg \min _{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;\in \mathcal{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;}} \hat{\mu}(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where $\hat{\mu}(\mathbf{x})$ is the predicted mean of a Gaussian process at a design point x based on the previous m design points. This is not efficient. Prediction-based optimization does not take uncertainty into account, and new samples can be generated very close to existing samples rendering function evalutions useless.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;error-based-exploration&quot;&gt;Error based exploration&lt;&#x2F;h3&gt;
&lt;p&gt;Error-based exploration seeks to increase confidence in the true function. A Gaussian process can tell us both the mean and standard deviation at every point. A large standard deviation indicates low confidence, so error-based exploration samples at design points with maximum uncertainty.&lt;&#x2F;p&gt;
&lt;p&gt;The next sample point&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}^{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)}=\arg \min _{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;\in \mathcal{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;}} \hat{\sigma}(\mathbf{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aligned&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Optimization problems with unbounded feasible sets will always have high uncertainty far away from sampled points, making it impossible to become confident in the true underlying function over the entire domain&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lower-confidence-bound-exploration&quot;&gt;Lower confidence bound exploration&lt;&#x2F;h3&gt;
&lt;p&gt;Lower confidence bound exploration trades off between greedy minimization employed by prediction-based optimization and uncertainty reduction employed by error-based exploration. The next sample minimizes the lower confidence bound of the objective function&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;L B(\mathbf{x})=\hat{\mu}(\mathbf{x})-\alpha \hat{\sigma}(\mathbf{x})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where α ≥ 0 is a constant that controls the trade-off between exploration and exploitation. Exploration involves minimizing uncertainty, and exploitation involves minimizing the predicted mean&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.mathpix.com&#x2F;snip&#x2F;images&#x2F;hTnw50c9dDwDJHh7c_Y4LTBuh6zdA1s5Y2jVxcqj17g.original.fullsize.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;In essence, we have initial y, X for original objective function. We approximate using Guassian process using the formula&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;y_{1} \\
&lt;&#x2F;span&gt;&lt;span&gt;\vdots \\
&lt;&#x2F;span&gt;&lt;span&gt;y_{m}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right] \sim \mathcal{N}\left(\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{c}
&lt;&#x2F;span&gt;&lt;span&gt;m\left(\mathbf{x}^{(1)}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\vdots \\
&lt;&#x2F;span&gt;&lt;span&gt;m\left(\mathbf{x}^{(m)}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right],\left[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}{ccc}
&lt;&#x2F;span&gt;&lt;span&gt;k\left(\mathbf{x}^{(1)}, \mathbf{x}^{(1)}\right) &amp;amp; \cdots &amp;amp; k\left(\mathbf{x}^{(1)}, \mathbf{x}^{(m)}\right) \\
&lt;&#x2F;span&gt;&lt;span&gt;\vdots &amp;amp; \ddots &amp;amp; \vdots \\
&lt;&#x2F;span&gt;&lt;span&gt;k\left(\mathbf{x}^{(m)}, \mathbf{x}^{(1)}\right) &amp;amp; \cdots &amp;amp; k\left(\mathbf{x}^{(m)}, \mathbf{x}^{(m)}\right)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;}\right]\right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We get next sample design point and evaluate&#x2F;update our gaussian process model (x, y) using yhat formula above. Then we get another design point, evaluate&#x2F;update our surrogate model.&lt;&#x2F;p&gt;
&lt;p&gt;Remember the equation shown below has $m(x^{*})$ which is $E[f(x^{*})]$ which requires main objective function evaluation for updating posterior.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hence, updating posterior requires finding new design point and updating our gaussian process model. We use xnew and it&#x27;s evaluation on out main objective function. Once we make our gaussian process model more robust after adequate iterations, our new design point is our minimum. For sampling new design point, refer to Lower confidence bound exploration.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Taken from BO link.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;update_posterior&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;x_new&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x_new) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# evaluate f at new point.
&lt;&#x2F;span&gt;&lt;span&gt;    X = torch.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt;([gpmodel.X, x_new]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# incorporate new evaluation
&lt;&#x2F;span&gt;&lt;span&gt;    y = torch.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt;([gpmodel.y, y])
&lt;&#x2F;span&gt;&lt;span&gt;    gpmodel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;set_data&lt;&#x2F;span&gt;&lt;span&gt;(X, y)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# optimize the GP hyperparameters using Adam with lr=0.001
&lt;&#x2F;span&gt;&lt;span&gt;    optimizer = torch.optim.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Adam&lt;&#x2F;span&gt;&lt;span&gt;(gpmodel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;parameters&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lr&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.001&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    gp.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;(gpmodel, optimizer)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;same as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span&gt;\hat{\mathbf{y}} | \mathbf{y} \sim \mathcal{N}(\underbrace{\mathbf{m}\left(X^{*}\right)+\mathbf{K}\left(X^{*}, X\right) \mathbf{K}(X, X)^{-1}(\mathbf{y}-\mathbf{m}(X))}_{\text {mean }}, \underbrace{\mathbf{K}\left(X^{*}, X^{*}\right)-\mathbf{K}\left(X^{*}, X\right) \mathbf{K}(X, X)^{-1} \mathbf{K}\left(X, X^{*}\right)}_{\text {covariance }})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the covariance does not depend on y. This distribution is often referred to as the posterior distribution.&lt;&#x2F;p&gt;
&lt;p&gt;After doing this for a multiple points, we finally converge to our global minimum on our main objective function.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pyro.ai&#x2F;examples&#x2F;bo.html&quot;&gt;Bayesian optimization in Pyro&lt;&#x2F;a&gt; discusses the code for this. It&#x27;s very helpful.&lt;&#x2F;p&gt;
&lt;p&gt;The Bayesian optimization strategy works as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Place a prior on the objective function $f$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Each time we evaluate $f$ at a new point $x_{n}$, we update our model for $f(x)$. This model serves as a surrogate objective function and reflects our beliefs about $f$ (in particular it reflects our beliefs about where we expect $f(x)$ to be close to $f(x^{*})$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Since we are being Bayesian, our beliefs are encoded in a posterior that allows us to systematically reason about the uncertainty of our model predictions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use the posterior to derive an “acquisition” (prediction based, error based or lower bound) function $\alpha(x)$ that is easy to evaluate and differentiate (so that optimizing $\alpha(x)$ is easy). In contrast to $f(x)$, we will generally evaluate $\alpha(x)$ at many points $x$, since doing so will be cheap.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Repeat until convergence&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Next design point:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use the acquisition function to derive the next query point according to $x_{n+1}=\arg \min \alpha(x)$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Evaluate $f(x_{n+1})$ and update the posterior.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Scraping with Scala</title>
		<published>2020-02-29T00:00:00+00:00</published>
		<updated>2020-02-29T00:00:00+00:00</updated>
		<link href="https://trickster.github.io/posts/scraper/" type="text/html"/>
		<id>https://trickster.github.io/posts/scraper/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Step 1&lt;&#x2F;strong&gt;: Download ammonite&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Download Ammonite
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -L&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;github.com&#x2F;lihaoyi&#x2F;ammonite&#x2F;releases&#x2F;download&#x2F;2.0.4&#x2F;2.12-2.0.4-boostrap &amp;gt; amm212 &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x amm212
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;&#x2F;strong&gt;. Start ammonite&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;amm212 --class-based
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;&#x2F;strong&gt;. We need &lt;code&gt;akka-streams&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;import $ivy.`com.typesafe.akka::akka-stream:2.6.3`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; standard imports
&lt;&#x2F;span&gt;&lt;span&gt;import akka.stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;import akka.stream.scaladsl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;import akka.{ Done, NotUsed }
&lt;&#x2F;span&gt;&lt;span&gt;import akka.actor.ActorSystem
&lt;&#x2F;span&gt;&lt;span&gt;import akka.util.ByteString
&lt;&#x2F;span&gt;&lt;span&gt;import scala.concurrent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;import scala.concurrent.duration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Json parsing
&lt;&#x2F;span&gt;&lt;span&gt;import ujson.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Handle files
&lt;&#x2F;span&gt;&lt;span&gt;import java.nio.file.Paths
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span&gt;= ActorSystem(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;QuickStart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span&gt;= scala.io.Source.fromFile(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;source.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; we need to scrape these urls or some ids for an endpoint
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;parser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) = {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;ENDPOINT&#x2F;{i}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;urlResponse &lt;&#x2F;span&gt;&lt;span&gt;= Try(ujson.read(requests.get(url).data.toString))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= urlResponse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        case Success(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;PARSED_RESULT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        case Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(i, result)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;&#x2F;strong&gt;. We create file sink to store the data (you can print to console as well)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;lineSink&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Sink&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;IOResult&lt;&#x2F;span&gt;&lt;span&gt;]] =
&lt;&#x2F;span&gt;&lt;span&gt;    Flow[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)].map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ByteString(s._1 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; + s._2 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)).toMat(FileIO.toPath(Paths.get(filename)))(Keep.right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;&#x2F;strong&gt;. Introduce throttling behavior because some websites disallow too many requests. Here, we make 25 requests in 10 seconds (5 requests in 2 seconds)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultFile &lt;&#x2F;span&gt;&lt;span&gt;= source.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.toInt).throttle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;.second).map(parser).runWith(lineSink(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;output.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;all-done-from-console-with-ammonite-shell&quot;&gt;All done from console with Ammonite shell&lt;&#x2F;h3&gt;
</content>
	</entry>
</feed>
